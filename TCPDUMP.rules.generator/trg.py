#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Marcus Botacin
# Generate Latex tables from specific inputs

import getopt # parser
import sys # receive args
import re # handling string inputs

# display head when printing
head="[TRG]"

# usage information
def usage(bin_name):

	print(	"%s python %s --interface <iface> (required) --options" % (head,bin_name))
	print(	"%s Options:"
		" --host <host list>"
		" --exclude-host <host_list>"
		" --port <port_list>"
		" --exclude-port <port_list"
		" --protocol <protocol_list>"
		" --exclude-protocol <protocol_list>"
		" --out <outfile>"
		 % head)
	print("%s Type -h for help" % head)


# tcpdump command
def emit_tcpdump(command):
	command.append("tcpdump")

# output file
def emit_outfile(command,OutFile):
	command.append("-w")
	command.append(OutFile)

# capturing interface
def emit_interface(command,Interface):
	command.append("-i")
	command.append(Interface)

# general rules
def emit_keyword(command,key,alist,negate):
	global last
	# iterate over argument list
	for a in alist:
		# case of a previous command, concatenate
		if last!=None:
			command.append("and")
		# case negate, emit not
		if negate:
			command.append("not")
		# update last
		last=a
		# case keyword, emit
		if key:
			command.append(key)
		# emit argument
		command.append(a)

# Main
def main(Interface,OutFile,Host_list,Exclude_Host_list,Port_list,Exclude_Port_list,Protocol_list,Exclude_Protocol_list):

	# start up values, empty
	global last
	last = None
	command=[]

	# emit tcpdump command
	emit_tcpdump(command)

	# emit interface
	emit_interface(command,Interface)

	# emit host
	if Host_list:
		emit_keyword(command,"host",Host_list,False)

	# emit host exclusion
	if Exclude_Host_list:
		emit_keyword(command,"host",Exclude_Host_list,True)

	# port list
	if Port_list:
		emit_keyword(command,"port",Port_list,False)
	
	# exclude port list
	if Exclude_Port_list:
		emit_keyword(command,"port",Exclude_Port_list,True)

	# protocol
	if Protocol_list:
		emit_keyword(command,None,Protocol_list,False)

	# exclude protocol
	if Exclude_Protocol_list:
		emit_keyword(command,None,Exclude_Protocol_list,True)

	# emit out file
	if OutFile:
		emit_outfile(command,OutFile)

	# command is a vector which can be used on subprocess

	# emit the final command+args
	print ' '.join(command)

# parser
def parse(args):
	bin_name=args[0] # script name

	Interface=None # interface to be listened
	Host_list=[] # host list
	Exclude_Host_list=[] # excluded hosts lists
	Port_list=[] # port list
	Exclude_Port_list=[] # excluded ports
	Protocol_list=[] # protocols
	Exclude_Protocol_list=[] # excluded protocols
	OutFile = None # output file
	_usage = False # emit usage message ?

	# parse arguments
	_optlist,_args = getopt.getopt(args[1:],'hi:',['host=','interface=','out=','exclude-host=','port=','exclude-port=','protocol=','exclude-protocol='])
	
	# parsed arguments
	for o,a in _optlist:
	# iterate over all args
		#help
		if "-h" == o:
			# usage will be displayed
			_usage=True
		#Iface
		elif "interface" in o:
			Interface=a
		# outfile
		elif "out" in o:
			OutFile = a
		# host list
		elif '--host' == o:
			# split string elements into the array
			Host_list=a.split(' ')
		# exclude host
		elif 'exclude-host' in o:
			Exclude_Host_list=a.split(' ')
		# port
		elif '--port' == o:
			Port_list=a.split(' ')
		# exclude port
		elif 'exclude-port' in o:
			Exclude_Port_list=a.split(' ')
		# protocol
		elif '--protocol' == o:
			Protocol_list=a.split(' ')
		# exclude protocol
		elif 'exclude-protocol' in o:
			Exclude_Protocol_list=a.split(' ')

	# args parsed
	
	# must have an interface
	if Interface is None:
		print("%s No Interface Supplied" % head)
		# usage will be displayed
		_usage=True
	
	# display usage message ?
	if _usage:
		usage(bin_name)
		# if usage, then finish
		sys.exit(0)

	# parsed params
	return Interface,OutFile,Host_list,Exclude_Host_list,Port_list,Exclude_Port_list,Protocol_list,Exclude_Protocol_list

# Entry Point
if __name__ == "__main__":
	# parse args
	# errors will stop execution
	Interface,OutFile,Host_list,Exclude_Host_list,Port_list,Exclude_Port_list,Protocol_list,Exclude_Protocol_list = parse(sys.argv)
	# if ok, start
	main(Interface,OutFile,Host_list,Exclude_Host_list,Port_list,Exclude_Port_list,Protocol_list,Exclude_Protocol_list)
	
else:
	# module import case
	print("No module import support yet")
