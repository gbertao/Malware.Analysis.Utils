#!/usr/bin/env python
# Allow shell without calling py directly

#Marcus Botacin - Unicamp - 2017
# PE.Info - Retrieves PE Information


# Import Block

import getopt   # --parameters
import json     # output utility
import sys	# args - parameters
import pefile	# bin utils - PE info from files

# retrieve information using pefile util
def pefile_info(path):
	
	# open path directly
	pe = pefile.PE(path)
	

	# base info
	entry=""+str(hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))+""
	img_base=""+str(hex(pe.OPTIONAL_HEADER.ImageBase))+""
	n_sec=""+str(pe.FILE_HEADER.NumberOfSections)+""

	#sections

	s=[]
	for section in pe.sections:
		s_name=section.Name.split("\x00")[0]
		si={"name" : s_name, "Virtual Address" : hex(section.VirtualAddress), "Virtual Size" : hex(section.Misc_VirtualSize), "Size of raw data" : hex(section.SizeOfRawData) }
		s.append(si)	


	#imports

	imports=[]
	for entries in pe.DIRECTORY_ENTRY_IMPORT:
		internals=[]
		for imp in entries.imports:
			data={"Name ": str(imp.name), "Address" : str(hex(imp.address)) }
			internals.append(data)
		imps={"Name" : str(entries.dll), "Imports" : internals }
		imports.append(imps)
		

	#exports

	exports=[]
	try:
		for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
			expt={"Name" : str(exp.name), "Address" : hex(pe.OPTIONAL_HEADER.ImageBase + exp.address)}
			exports.append(expt)
	except:
		pass


	return entry,img_base,n_sec,s,imports,exports

# Usage

def usage(bin):
    # Usage info
    print("python "+bin+" -i (--input) <input> -o (--output) <output>")
    # incorrect args, finishing
    sys.exit(0)

# Parser

def parser(args):
    # starts with no input
    input="" 
    output=""
    # zero args check
    if(len(args)>1):
        # having some args
        try:
            # try to get args
            options, remainder = getopt.getopt(sys.argv[1:],"i:o:",["input=","output="])
            # for each retrieved arg
            for opt, args in options:
                # case input
                if opt in ["-i","--input"]:
                    input=args
                # case output
                if opt in ["-o","--output"]:
                    output=args
            # if both were supplied, return
            if(input!="" and output!=""):
                return input,output
            else:
            # if only one, error
                usage(args[0])
        except getopt.GetoptError as err:
            # get opt parsing error
            print(str(err))
            usage(args[0])
    else:
        # case no args supplied
        usage(args[0])

# Main

def main(input,output):
    # debug info
    print("Parsing: %s and storing into: %s" % (input,output))
    # call the parser and dump the result
    entry,img_base,n_sec,s,imports,exports=pefile_info(input)
    final={"Entry Point" : entry, "Image Base":img_base,"Number Of Section" : n_sec,
"Sections" : s, "Imports" : imports, "Exports" : exports}
    out_json=json.dumps(final,indent=1)
    # store result
    f=open(output,"w").write(out_json)
    
# Entry Point

# Check who is calling
# By now, only direct calls are supported

if __name__ == '__main__':

        # start parsing args
        input,output=parser(sys.argv)

        # if ok, call main
        main(input,output)

else:
        # Not Supported. Working on it.
        print("Module import not supported yet!")
        #So, exiting
        sys.exit(0)
