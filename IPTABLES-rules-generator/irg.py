#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Marcus Botacin
# Generate IPTABLES filtering rules

import codecs # unicode
import sys # args
from ConfigParser import SafeConfigParser #config file                                     

# accept/reject connection on a given port
def port_config(action,port,proto):
	print("iptables -A FORWARD -p %s --dport %s -j %s" % (proto,port,action))

# enable forwarding of established connections
def accept_forward():
	print("iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT")

# enable maskerading
def config_maskerade(iface):
	print("iptables -t nat -A POSTROUTING -o %s -j MASQUERADE" % iface)

# reroute a connection to a distinct IP
def routing(proto,ip):
	print("iptables -t nat -A -p %s -j DNAT --to %s" % (proto,ip))

#main itself
def main(input_file):
	# open config
	with codecs.open(input_file, 'r', encoding='utf-8') as f:
		parser = SafeConfigParser()
		parser.readfp(f)
		
		# enable forward ?
		fwd = parser.get('forward', 'enabled')
		if fwd in ['Yes','True','OK']:
			accept_forward()

		# config maskerade ?
		msk = parser.get('maskerade','enabled')
		if msk in ['Yes','True','OK']:
			iface=parser.get('maskerade','iface')
			config_maskerade(iface)

		# accepted ports
		prt = parser.get('ports','accept')
		for port,proto in zip(*[iter(prt.split(','))]*2):
			port_config("ACCEPT",port,proto)

		# rejected ports
		prt = parser.get('ports','reject')
		for port,proto in zip(*[iter(prt.split(','))]*2):
			port_config("REJECT",port,proto)

		# rerouting..
		route = parser.get('routing','route')
		for ip,proto in zip(*[iter(route.split(','))]*2):
			routing(proto,ip)

# usage message
def usage(bin_name):
	print("Usage: python %s <config_file>" % bin_name)

# Entry Point
if __name__ == "__main__":
	# config file supplied
	if(len(sys.argv)==2):
		main(sys.argv[1])
	else:
	# no file supplied
		usage(sys.argv[0])
else:
# module import
	print("No module import supported yet!")
